#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
from code.transaction_data_processor import TransactionDataProcessor
import json

def test_data_processing():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("=== Testing Transaction Data Processing ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    processor = TransactionDataProcessor(
        train_parquet_dir="train_trx_file.parquet",
        test_parquet_dir="test_trx_file.parquet",
        max_seq_length=50,
        val_split=0.1
    )
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("Processing data...")
        train_data, val_data, test_data = processor.process_all_data("data/transactions")
        
        print(f"‚úÖ Data processing completed successfully!")
        print(f"   Train samples: {len(train_data)}")
        print(f"   Validation samples: {len(val_data)}")
        print(f"   Test samples: {len(test_data)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
        if len(train_data) > 0:
            sample = train_data[0]
            print(f"‚úÖ Sample data structure:")
            print(f"   Instruction: {sample['instruction'][:100]}...")
            print(f"   Input: {sample['input'][:100]}...")
            print(f"   Output: {sample['output']}")
            print(f"   Client ID: {sample['client_id']}")
            print(f"   Target: {sample['target']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–∞—Ä—å
        print(f"‚úÖ Vocabulary created:")
        print(f"   Categories: {len(processor.small_group_map)}")
        print(f"   Sample mapping: {list(processor.small_group_map.items())[:5]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        files_to_check = [
            "data/transactions/train.json",
            "data/transactions/valid.json", 
            "data/transactions/test.json",
            "data/transactions/vocabulary.json"
        ]
        
        for file_path in files_to_check:
            if os.path.exists(file_path):
                print(f"‚úÖ File created: {file_path}")
            else:
                print(f"‚ùå File missing: {file_path}")
        
        print("\n=== Test completed successfully! ===")
        return True
        
    except Exception as e:
        print(f"‚ùå Error during data processing: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_sample_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ few-shot —Å—ç–º–ø–ª–æ–≤"""
    print("\n=== Testing Few-shot Sample Generation ===")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        with open("data/transactions/train.json", 'r') as f:
            train_data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º few-shot —Å—ç–º–ø–ª—ã
        n_fewshot = 100
        import random
        random.seed(42)
        fewshot_samples = random.sample(train_data, min(n_fewshot, len(train_data)))
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º few-shot –¥–∞–Ω–Ω—ã–µ
        os.makedirs("data/transactions/fewshot", exist_ok=True)
        with open(f"data/transactions/fewshot/train-{n_fewshot}.json", 'w') as f:
            json.dump(fewshot_samples, f, indent=2)
        
        with open(f"data/transactions/fewshot/valid-{n_fewshot}.json", 'w') as f:
            json.dump(fewshot_samples[:len(fewshot_samples)//2], f, indent=2)
        
        print(f"‚úÖ Few-shot samples generated:")
        print(f"   Train samples: {len(fewshot_samples)}")
        print(f"   Validation samples: {len(fewshot_samples)//2}")
        print(f"   Files: data/transactions/fewshot/train-{n_fewshot}.json")
        print(f"   Files: data/transactions/fewshot/valid-{n_fewshot}.json")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error during few-shot generation: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("Starting transaction data processing tests...")
    
    # –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    success1 = test_data_processing()
    
    # –¢–µ—Å—Ç 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è few-shot —Å—ç–º–ø–ª–æ–≤
    if success1:
        success2 = test_sample_generation()
    else:
        success2 = False
    
    if success1 and success2:
        print("\nüéâ All tests passed! You can now proceed with the full pipeline.")
        print("\nNext steps:")
        print("1. Update the base model path in the scripts")
        print("2. Run: sh run_transaction_pipeline.sh <your_model_path>")
    else:
        print("\n‚ùå Some tests failed. Please check the errors above.")
        sys.exit(1) 